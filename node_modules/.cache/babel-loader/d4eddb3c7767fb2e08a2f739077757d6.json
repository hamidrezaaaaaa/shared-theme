{"ast":null,"code":"import { hooks } from '../utils/hooks';\nimport { createDate, createUTCDate } from './date-from-array';\nimport { daysInYear } from '../units/year';\nimport { weekOfYear, weeksInYear, dayOfYearFromWeeks } from '../units/week-calendar-utils';\nimport { YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { createLocal } from './local';\nimport defaults from '../utils/defaults';\nimport getParsingFlags from './parsing-flags';\n\nfunction currentDateArray(config) {\n  // hooks is actually the exported moment object\n  var nowValue = new Date(hooks.now());\n\n  if (config._useUTC) {\n    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n  }\n\n  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n} // convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\n\n\nexport function configFromArray(config) {\n  var i,\n      date,\n      input = [],\n      currentDate,\n      expectedWeekday,\n      yearToUse;\n\n  if (config._d) {\n    return;\n  }\n\n  currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays\n\n  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n    dayOfYearFromWeekInfo(config);\n  } //if the day of the year is set, figure out what it is\n\n\n  if (config._dayOfYear != null) {\n    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n      getParsingFlags(config)._overflowDayOfYear = true;\n    }\n\n    date = createUTCDate(yearToUse, 0, config._dayOfYear);\n    config._a[MONTH] = date.getUTCMonth();\n    config._a[DATE] = date.getUTCDate();\n  } // Default to current date.\n  // * if no year, month, day of month are given, default to today\n  // * if day of month is given, default month and year\n  // * if month is given, default only year\n  // * if year is given, don't default anything\n\n\n  for (i = 0; i < 3 && config._a[i] == null; ++i) {\n    config._a[i] = input[i] = currentDate[i];\n  } // Zero out whatever was not defaulted, including time\n\n\n  for (; i < 7; i++) {\n    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n  } // Check for 24:00:00.000\n\n\n  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n    config._nextDay = true;\n    config._a[HOUR] = 0;\n  }\n\n  config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed\n  // with parseZone.\n\n  if (config._tzm != null) {\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n  }\n\n  if (config._nextDay) {\n    config._a[HOUR] = 24;\n  } // check for mismatching day of week\n\n\n  if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n    getParsingFlags(config).weekdayMismatch = true;\n  }\n}\n\nfunction dayOfYearFromWeekInfo(config) {\n  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n  w = config._w;\n\n  if (w.GG != null || w.W != null || w.E != null) {\n    dow = 1;\n    doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on\n    // how we interpret now (local, utc, fixed offset). So create\n    // a now version of current config (take local/utc/offset flags, and\n    // create now).\n\n    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n    week = defaults(w.W, 1);\n    weekday = defaults(w.E, 1);\n\n    if (weekday < 1 || weekday > 7) {\n      weekdayOverflow = true;\n    }\n  } else {\n    dow = config._locale._week.dow;\n    doy = config._locale._week.doy;\n    curWeek = weekOfYear(createLocal(), dow, doy);\n    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.\n\n    week = defaults(w.w, curWeek.week);\n\n    if (w.d != null) {\n      // weekday -- low day numbers are considered next week\n      weekday = w.d;\n\n      if (weekday < 0 || weekday > 6) {\n        weekdayOverflow = true;\n      }\n    } else if (w.e != null) {\n      // local weekday -- counting starts from beginning of week\n      weekday = w.e + dow;\n\n      if (w.e < 0 || w.e > 6) {\n        weekdayOverflow = true;\n      }\n    } else {\n      // default to beginning of week\n      weekday = dow;\n    }\n  }\n\n  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n    getParsingFlags(config)._overflowWeeks = true;\n  } else if (weekdayOverflow != null) {\n    getParsingFlags(config)._overflowWeekday = true;\n  } else {\n    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n    config._a[YEAR] = temp.year;\n    config._dayOfYear = temp.dayOfYear;\n  }\n}","map":{"version":3,"names":["hooks","createDate","createUTCDate","daysInYear","weekOfYear","weeksInYear","dayOfYearFromWeeks","YEAR","MONTH","DATE","HOUR","MINUTE","SECOND","MILLISECOND","createLocal","defaults","getParsingFlags","currentDateArray","config","nowValue","Date","now","_useUTC","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","configFromArray","i","date","input","currentDate","expectedWeekday","yearToUse","_d","_w","_a","dayOfYearFromWeekInfo","_dayOfYear","_overflowDayOfYear","_nextDay","apply","getUTCDay","getDay","_tzm","setUTCMinutes","getUTCMinutes","d","weekdayMismatch","w","weekYear","week","weekday","dow","doy","temp","weekdayOverflow","curWeek","GG","W","E","year","_locale","_week","gg","e","_overflowWeeks","_overflowWeekday","dayOfYear"],"sources":["/Users/soorena/projects/shared-theme/node_modules/moment/src/lib/create/from-array.js"],"sourcesContent":["import { hooks } from '../utils/hooks';\nimport { createDate, createUTCDate } from './date-from-array';\nimport { daysInYear } from '../units/year';\nimport {\n    weekOfYear,\n    weeksInYear,\n    dayOfYearFromWeeks,\n} from '../units/week-calendar-utils';\nimport {\n    YEAR,\n    MONTH,\n    DATE,\n    HOUR,\n    MINUTE,\n    SECOND,\n    MILLISECOND,\n} from '../units/constants';\nimport { createLocal } from './local';\nimport defaults from '../utils/defaults';\nimport getParsingFlags from './parsing-flags';\n\nfunction currentDateArray(config) {\n    // hooks is actually the exported moment object\n    var nowValue = new Date(hooks.now());\n    if (config._useUTC) {\n        return [\n            nowValue.getUTCFullYear(),\n            nowValue.getUTCMonth(),\n            nowValue.getUTCDate(),\n        ];\n    }\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n\n// convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\nexport function configFromArray(config) {\n    var i,\n        date,\n        input = [],\n        currentDate,\n        expectedWeekday,\n        yearToUse;\n\n    if (config._d) {\n        return;\n    }\n\n    currentDate = currentDateArray(config);\n\n    //compute day of the year from weeks and weekdays\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n        dayOfYearFromWeekInfo(config);\n    }\n\n    //if the day of the year is set, figure out what it is\n    if (config._dayOfYear != null) {\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n        if (\n            config._dayOfYear > daysInYear(yearToUse) ||\n            config._dayOfYear === 0\n        ) {\n            getParsingFlags(config)._overflowDayOfYear = true;\n        }\n\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);\n        config._a[MONTH] = date.getUTCMonth();\n        config._a[DATE] = date.getUTCDate();\n    }\n\n    // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n        config._a[i] = input[i] = currentDate[i];\n    }\n\n    // Zero out whatever was not defaulted, including time\n    for (; i < 7; i++) {\n        config._a[i] = input[i] =\n            config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n    }\n\n    // Check for 24:00:00.000\n    if (\n        config._a[HOUR] === 24 &&\n        config._a[MINUTE] === 0 &&\n        config._a[SECOND] === 0 &&\n        config._a[MILLISECOND] === 0\n    ) {\n        config._nextDay = true;\n        config._a[HOUR] = 0;\n    }\n\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(\n        null,\n        input\n    );\n    expectedWeekday = config._useUTC\n        ? config._d.getUTCDay()\n        : config._d.getDay();\n\n    // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n    if (config._tzm != null) {\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n\n    if (config._nextDay) {\n        config._a[HOUR] = 24;\n    }\n\n    // check for mismatching day of week\n    if (\n        config._w &&\n        typeof config._w.d !== 'undefined' &&\n        config._w.d !== expectedWeekday\n    ) {\n        getParsingFlags(config).weekdayMismatch = true;\n    }\n}\n\nfunction dayOfYearFromWeekInfo(config) {\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n    w = config._w;\n    if (w.GG != null || w.W != null || w.E != null) {\n        dow = 1;\n        doy = 4;\n\n        // TODO: We need to take the current isoWeekYear, but that depends on\n        // how we interpret now (local, utc, fixed offset). So create\n        // a now version of current config (take local/utc/offset flags, and\n        // create now).\n        weekYear = defaults(\n            w.GG,\n            config._a[YEAR],\n            weekOfYear(createLocal(), 1, 4).year\n        );\n        week = defaults(w.W, 1);\n        weekday = defaults(w.E, 1);\n        if (weekday < 1 || weekday > 7) {\n            weekdayOverflow = true;\n        }\n    } else {\n        dow = config._locale._week.dow;\n        doy = config._locale._week.doy;\n\n        curWeek = weekOfYear(createLocal(), dow, doy);\n\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n        // Default to current week.\n        week = defaults(w.w, curWeek.week);\n\n        if (w.d != null) {\n            // weekday -- low day numbers are considered next week\n            weekday = w.d;\n            if (weekday < 0 || weekday > 6) {\n                weekdayOverflow = true;\n            }\n        } else if (w.e != null) {\n            // local weekday -- counting starts from beginning of week\n            weekday = w.e + dow;\n            if (w.e < 0 || w.e > 6) {\n                weekdayOverflow = true;\n            }\n        } else {\n            // default to beginning of week\n            weekday = dow;\n        }\n    }\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n        getParsingFlags(config)._overflowWeeks = true;\n    } else if (weekdayOverflow != null) {\n        getParsingFlags(config)._overflowWeekday = true;\n    } else {\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,mBAA1C;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SACIC,UADJ,EAEIC,WAFJ,EAGIC,kBAHJ,QAIO,8BAJP;AAKA,SACIC,IADJ,EAEIC,KAFJ,EAGIC,IAHJ,EAIIC,IAJJ,EAKIC,MALJ,EAMIC,MANJ,EAOIC,WAPJ,QAQO,oBARP;AASA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,eAAP,MAA4B,iBAA5B;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;EAC9B;EACA,IAAIC,QAAQ,GAAG,IAAIC,IAAJ,CAASpB,KAAK,CAACqB,GAAN,EAAT,CAAf;;EACA,IAAIH,MAAM,CAACI,OAAX,EAAoB;IAChB,OAAO,CACHH,QAAQ,CAACI,cAAT,EADG,EAEHJ,QAAQ,CAACK,WAAT,EAFG,EAGHL,QAAQ,CAACM,UAAT,EAHG,CAAP;EAKH;;EACD,OAAO,CAACN,QAAQ,CAACO,WAAT,EAAD,EAAyBP,QAAQ,CAACQ,QAAT,EAAzB,EAA8CR,QAAQ,CAACS,OAAT,EAA9C,CAAP;AACH,C,CAED;AACA;AACA;AACA;;;AACA,OAAO,SAASC,eAAT,CAAyBX,MAAzB,EAAiC;EACpC,IAAIY,CAAJ;EAAA,IACIC,IADJ;EAAA,IAEIC,KAAK,GAAG,EAFZ;EAAA,IAGIC,WAHJ;EAAA,IAIIC,eAJJ;EAAA,IAKIC,SALJ;;EAOA,IAAIjB,MAAM,CAACkB,EAAX,EAAe;IACX;EACH;;EAEDH,WAAW,GAAGhB,gBAAgB,CAACC,MAAD,CAA9B,CAZoC,CAcpC;;EACA,IAAIA,MAAM,CAACmB,EAAP,IAAanB,MAAM,CAACoB,EAAP,CAAU7B,IAAV,KAAmB,IAAhC,IAAwCS,MAAM,CAACoB,EAAP,CAAU9B,KAAV,KAAoB,IAAhE,EAAsE;IAClE+B,qBAAqB,CAACrB,MAAD,CAArB;EACH,CAjBmC,CAmBpC;;;EACA,IAAIA,MAAM,CAACsB,UAAP,IAAqB,IAAzB,EAA+B;IAC3BL,SAAS,GAAGpB,QAAQ,CAACG,MAAM,CAACoB,EAAP,CAAU/B,IAAV,CAAD,EAAkB0B,WAAW,CAAC1B,IAAD,CAA7B,CAApB;;IAEA,IACIW,MAAM,CAACsB,UAAP,GAAoBrC,UAAU,CAACgC,SAAD,CAA9B,IACAjB,MAAM,CAACsB,UAAP,KAAsB,CAF1B,EAGE;MACExB,eAAe,CAACE,MAAD,CAAf,CAAwBuB,kBAAxB,GAA6C,IAA7C;IACH;;IAEDV,IAAI,GAAG7B,aAAa,CAACiC,SAAD,EAAY,CAAZ,EAAejB,MAAM,CAACsB,UAAtB,CAApB;IACAtB,MAAM,CAACoB,EAAP,CAAU9B,KAAV,IAAmBuB,IAAI,CAACP,WAAL,EAAnB;IACAN,MAAM,CAACoB,EAAP,CAAU7B,IAAV,IAAkBsB,IAAI,CAACN,UAAL,EAAlB;EACH,CAjCmC,CAmCpC;EACA;EACA;EACA;EACA;;;EACA,KAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAJ,IAASZ,MAAM,CAACoB,EAAP,CAAUR,CAAV,KAAgB,IAArC,EAA2C,EAAEA,CAA7C,EAAgD;IAC5CZ,MAAM,CAACoB,EAAP,CAAUR,CAAV,IAAeE,KAAK,CAACF,CAAD,CAAL,GAAWG,WAAW,CAACH,CAAD,CAArC;EACH,CA1CmC,CA4CpC;;;EACA,OAAOA,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;IACfZ,MAAM,CAACoB,EAAP,CAAUR,CAAV,IAAeE,KAAK,CAACF,CAAD,CAAL,GACXZ,MAAM,CAACoB,EAAP,CAAUR,CAAV,KAAgB,IAAhB,GAAwBA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAAtC,GAA2CZ,MAAM,CAACoB,EAAP,CAAUR,CAAV,CAD/C;EAEH,CAhDmC,CAkDpC;;;EACA,IACIZ,MAAM,CAACoB,EAAP,CAAU5B,IAAV,MAAoB,EAApB,IACAQ,MAAM,CAACoB,EAAP,CAAU3B,MAAV,MAAsB,CADtB,IAEAO,MAAM,CAACoB,EAAP,CAAU1B,MAAV,MAAsB,CAFtB,IAGAM,MAAM,CAACoB,EAAP,CAAUzB,WAAV,MAA2B,CAJ/B,EAKE;IACEK,MAAM,CAACwB,QAAP,GAAkB,IAAlB;IACAxB,MAAM,CAACoB,EAAP,CAAU5B,IAAV,IAAkB,CAAlB;EACH;;EAEDQ,MAAM,CAACkB,EAAP,GAAY,CAAClB,MAAM,CAACI,OAAP,GAAiBpB,aAAjB,GAAiCD,UAAlC,EAA8C0C,KAA9C,CACR,IADQ,EAERX,KAFQ,CAAZ;EAIAE,eAAe,GAAGhB,MAAM,CAACI,OAAP,GACZJ,MAAM,CAACkB,EAAP,CAAUQ,SAAV,EADY,GAEZ1B,MAAM,CAACkB,EAAP,CAAUS,MAAV,EAFN,CAjEoC,CAqEpC;EACA;;EACA,IAAI3B,MAAM,CAAC4B,IAAP,IAAe,IAAnB,EAAyB;IACrB5B,MAAM,CAACkB,EAAP,CAAUW,aAAV,CAAwB7B,MAAM,CAACkB,EAAP,CAAUY,aAAV,KAA4B9B,MAAM,CAAC4B,IAA3D;EACH;;EAED,IAAI5B,MAAM,CAACwB,QAAX,EAAqB;IACjBxB,MAAM,CAACoB,EAAP,CAAU5B,IAAV,IAAkB,EAAlB;EACH,CA7EmC,CA+EpC;;;EACA,IACIQ,MAAM,CAACmB,EAAP,IACA,OAAOnB,MAAM,CAACmB,EAAP,CAAUY,CAAjB,KAAuB,WADvB,IAEA/B,MAAM,CAACmB,EAAP,CAAUY,CAAV,KAAgBf,eAHpB,EAIE;IACElB,eAAe,CAACE,MAAD,CAAf,CAAwBgC,eAAxB,GAA0C,IAA1C;EACH;AACJ;;AAED,SAASX,qBAAT,CAA+BrB,MAA/B,EAAuC;EACnC,IAAIiC,CAAJ,EAAOC,QAAP,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,eAAhD,EAAiEC,OAAjE;EAEAR,CAAC,GAAGjC,MAAM,CAACmB,EAAX;;EACA,IAAIc,CAAC,CAACS,EAAF,IAAQ,IAAR,IAAgBT,CAAC,CAACU,CAAF,IAAO,IAAvB,IAA+BV,CAAC,CAACW,CAAF,IAAO,IAA1C,EAAgD;IAC5CP,GAAG,GAAG,CAAN;IACAC,GAAG,GAAG,CAAN,CAF4C,CAI5C;IACA;IACA;IACA;;IACAJ,QAAQ,GAAGrC,QAAQ,CACfoC,CAAC,CAACS,EADa,EAEf1C,MAAM,CAACoB,EAAP,CAAU/B,IAAV,CAFe,EAGfH,UAAU,CAACU,WAAW,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,CAAV,CAAgCiD,IAHjB,CAAnB;IAKAV,IAAI,GAAGtC,QAAQ,CAACoC,CAAC,CAACU,CAAH,EAAM,CAAN,CAAf;IACAP,OAAO,GAAGvC,QAAQ,CAACoC,CAAC,CAACW,CAAH,EAAM,CAAN,CAAlB;;IACA,IAAIR,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,CAA7B,EAAgC;MAC5BI,eAAe,GAAG,IAAlB;IACH;EACJ,CAlBD,MAkBO;IACHH,GAAG,GAAGrC,MAAM,CAAC8C,OAAP,CAAeC,KAAf,CAAqBV,GAA3B;IACAC,GAAG,GAAGtC,MAAM,CAAC8C,OAAP,CAAeC,KAAf,CAAqBT,GAA3B;IAEAG,OAAO,GAAGvD,UAAU,CAACU,WAAW,EAAZ,EAAgByC,GAAhB,EAAqBC,GAArB,CAApB;IAEAJ,QAAQ,GAAGrC,QAAQ,CAACoC,CAAC,CAACe,EAAH,EAAOhD,MAAM,CAACoB,EAAP,CAAU/B,IAAV,CAAP,EAAwBoD,OAAO,CAACI,IAAhC,CAAnB,CANG,CAQH;;IACAV,IAAI,GAAGtC,QAAQ,CAACoC,CAAC,CAACA,CAAH,EAAMQ,OAAO,CAACN,IAAd,CAAf;;IAEA,IAAIF,CAAC,CAACF,CAAF,IAAO,IAAX,EAAiB;MACb;MACAK,OAAO,GAAGH,CAAC,CAACF,CAAZ;;MACA,IAAIK,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,CAA7B,EAAgC;QAC5BI,eAAe,GAAG,IAAlB;MACH;IACJ,CAND,MAMO,IAAIP,CAAC,CAACgB,CAAF,IAAO,IAAX,EAAiB;MACpB;MACAb,OAAO,GAAGH,CAAC,CAACgB,CAAF,GAAMZ,GAAhB;;MACA,IAAIJ,CAAC,CAACgB,CAAF,GAAM,CAAN,IAAWhB,CAAC,CAACgB,CAAF,GAAM,CAArB,EAAwB;QACpBT,eAAe,GAAG,IAAlB;MACH;IACJ,CANM,MAMA;MACH;MACAJ,OAAO,GAAGC,GAAV;IACH;EACJ;;EACD,IAAIF,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGhD,WAAW,CAAC+C,QAAD,EAAWG,GAAX,EAAgBC,GAAhB,CAAlC,EAAwD;IACpDxC,eAAe,CAACE,MAAD,CAAf,CAAwBkD,cAAxB,GAAyC,IAAzC;EACH,CAFD,MAEO,IAAIV,eAAe,IAAI,IAAvB,EAA6B;IAChC1C,eAAe,CAACE,MAAD,CAAf,CAAwBmD,gBAAxB,GAA2C,IAA3C;EACH,CAFM,MAEA;IACHZ,IAAI,GAAGnD,kBAAkB,CAAC8C,QAAD,EAAWC,IAAX,EAAiBC,OAAjB,EAA0BC,GAA1B,EAA+BC,GAA/B,CAAzB;IACAtC,MAAM,CAACoB,EAAP,CAAU/B,IAAV,IAAkBkD,IAAI,CAACM,IAAvB;IACA7C,MAAM,CAACsB,UAAP,GAAoBiB,IAAI,CAACa,SAAzB;EACH;AACJ"},"metadata":{},"sourceType":"module"}