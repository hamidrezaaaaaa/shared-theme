{"ast":null,"code":"import { daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport toInt from '../utils/to-int';\nexport function as(units) {\n  if (!this.isValid()) {\n    return NaN;\n  }\n\n  var days,\n      months,\n      milliseconds = this._milliseconds;\n  units = normalizeUnits(units);\n\n  if (units === 'month' || units === 'quarter' || units === 'year') {\n    days = this._days + milliseconds / 864e5;\n    months = this._months + daysToMonths(days);\n\n    switch (units) {\n      case 'month':\n        return months;\n\n      case 'quarter':\n        return months / 3;\n\n      case 'year':\n        return months / 12;\n    }\n  } else {\n    // handle milliseconds separately because of floating point math errors (issue #1867)\n    days = this._days + Math.round(monthsToDays(this._months));\n\n    switch (units) {\n      case 'week':\n        return days / 7 + milliseconds / 6048e5;\n\n      case 'day':\n        return days + milliseconds / 864e5;\n\n      case 'hour':\n        return days * 24 + milliseconds / 36e5;\n\n      case 'minute':\n        return days * 1440 + milliseconds / 6e4;\n\n      case 'second':\n        return days * 86400 + milliseconds / 1000;\n      // Math.floor prevents floating point math errors here\n\n      case 'millisecond':\n        return Math.floor(days * 864e5) + milliseconds;\n\n      default:\n        throw new Error('Unknown unit ' + units);\n    }\n  }\n} // TODO: Use this.as('ms')?\n\nexport function valueOf() {\n  if (!this.isValid()) {\n    return NaN;\n  }\n\n  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;\n}\n\nfunction makeAs(alias) {\n  return function () {\n    return this.as(alias);\n  };\n}\n\nvar asMilliseconds = makeAs('ms'),\n    asSeconds = makeAs('s'),\n    asMinutes = makeAs('m'),\n    asHours = makeAs('h'),\n    asDays = makeAs('d'),\n    asWeeks = makeAs('w'),\n    asMonths = makeAs('M'),\n    asQuarters = makeAs('Q'),\n    asYears = makeAs('y');\nexport { asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asQuarters, asYears };","map":{"version":3,"names":["daysToMonths","monthsToDays","normalizeUnits","toInt","as","units","isValid","NaN","days","months","milliseconds","_milliseconds","_days","_months","Math","round","floor","Error","valueOf","makeAs","alias","asMilliseconds","asSeconds","asMinutes","asHours","asDays","asWeeks","asMonths","asQuarters","asYears"],"sources":["/Users/soorena/projects/shared-theme/node_modules/moment/src/lib/duration/as.js"],"sourcesContent":["import { daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport toInt from '../utils/to-int';\n\nexport function as(units) {\n    if (!this.isValid()) {\n        return NaN;\n    }\n    var days,\n        months,\n        milliseconds = this._milliseconds;\n\n    units = normalizeUnits(units);\n\n    if (units === 'month' || units === 'quarter' || units === 'year') {\n        days = this._days + milliseconds / 864e5;\n        months = this._months + daysToMonths(days);\n        switch (units) {\n            case 'month':\n                return months;\n            case 'quarter':\n                return months / 3;\n            case 'year':\n                return months / 12;\n        }\n    } else {\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week':\n                return days / 7 + milliseconds / 6048e5;\n            case 'day':\n                return days + milliseconds / 864e5;\n            case 'hour':\n                return days * 24 + milliseconds / 36e5;\n            case 'minute':\n                return days * 1440 + milliseconds / 6e4;\n            case 'second':\n                return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'millisecond':\n                return Math.floor(days * 864e5) + milliseconds;\n            default:\n                throw new Error('Unknown unit ' + units);\n        }\n    }\n}\n\n// TODO: Use this.as('ms')?\nexport function valueOf() {\n    if (!this.isValid()) {\n        return NaN;\n    }\n    return (\n        this._milliseconds +\n        this._days * 864e5 +\n        (this._months % 12) * 2592e6 +\n        toInt(this._months / 12) * 31536e6\n    );\n}\n\nfunction makeAs(alias) {\n    return function () {\n        return this.as(alias);\n    };\n}\n\nvar asMilliseconds = makeAs('ms'),\n    asSeconds = makeAs('s'),\n    asMinutes = makeAs('m'),\n    asHours = makeAs('h'),\n    asDays = makeAs('d'),\n    asWeeks = makeAs('w'),\n    asMonths = makeAs('M'),\n    asQuarters = makeAs('Q'),\n    asYears = makeAs('y');\n\nexport {\n    asMilliseconds,\n    asSeconds,\n    asMinutes,\n    asHours,\n    asDays,\n    asWeeks,\n    asMonths,\n    asQuarters,\n    asYears,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}